/*
 * This file is generated by jOOQ.
 */
package generated.tables.daos;


import generated.tables.Product;
import generated.tables.records.ProductRecord;

import java.util.List;
import java.util.Optional;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ProductDao extends DAOImpl<ProductRecord, generated.tables.pojos.Product, Integer> {

    /**
     * Create a new ProductDao without any configuration
     */
    public ProductDao() {
        super(Product.PRODUCT, generated.tables.pojos.Product.class);
    }

    /**
     * Create a new ProductDao with an attached configuration
     */
    public ProductDao(Configuration configuration) {
        super(Product.PRODUCT, generated.tables.pojos.Product.class, configuration);
    }

    @Override
    public Integer getId(generated.tables.pojos.Product object) {
        return object.getCode();
    }

    /**
     * Fetch records that have <code>code BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<generated.tables.pojos.Product> fetchRangeOfCode(Integer lowerInclusive, Integer upperInclusive) {
        return fetchRange(Product.PRODUCT.CODE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>code IN (values)</code>
     */
    public List<generated.tables.pojos.Product> fetchByCode(Integer... values) {
        return fetch(Product.PRODUCT.CODE, values);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public generated.tables.pojos.Product fetchOneByCode(Integer value) {
        return fetchOne(Product.PRODUCT.CODE, value);
    }

    /**
     * Fetch a unique record that has <code>code = value</code>
     */
    public Optional<generated.tables.pojos.Product> fetchOptionalByCode(Integer value) {
        return fetchOptional(Product.PRODUCT.CODE, value);
    }

    /**
     * Fetch records that have <code>name BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<generated.tables.pojos.Product> fetchRangeOfName(String lowerInclusive, String upperInclusive) {
        return fetchRange(Product.PRODUCT.NAME, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>name IN (values)</code>
     */
    public List<generated.tables.pojos.Product> fetchByName(String... values) {
        return fetch(Product.PRODUCT.NAME, values);
    }
}
